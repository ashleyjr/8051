#!/bin/bash

###########################################################
# HELP
OK="all make clean set single"
NONE=""

HELP="N"
if [ -z "$1" ] ; then
   HELP="Y"   
fi

if [[ $OK =~ "$1" ]]; then
   echo ""
else
   HELP="Y"
fi

if [[ $HELP == "Y" ]]; then 
   echo ">>>>> HELP <<<<<"
   echo "   ./run all                                    = Make and run all tests, load over UART"
   echo "   ./run all preload                            = Make and run all tests, load straight to memory model"
   echo "   ./run single <path_to_c_file> preload        = Make all and run a single test, load straight to memory model"
   echo "   ./run single <path_to_c_file>                = Make all and run a single test, load over UART"
   echo "   ./run set <path_to_dir_of_c_files> preload   = Make all and run a single test, load straight to memory model"
   echo "   ./run set <path_to_dir_of_c_files>           = Make all and run a single test, load over UART"
   echo "   ./run make                                   = Make all c files"
   echo "   ./run clean                                  = Clean obj, etc files"
   exit
fi

###########################################################
# Make/clean
CMD="cd verif/src"
echo $CMD
$CMD

for d in *; do
   if [ -d "$d" ]; then
      CMD="cd $d"
      echo "$CMD"
      $CMD
      CLEAN="clean"
      CMD="make"
      if [[ "$1" == "$CLEAN" ]]; then
         CMD="make clean"
      fi
      echo $CMD
      $CMD
      cd ..
   fi
done 

CMD="cd ../.."
echo $CMD
$CMD

MAKE="make"
if [[ "$1" == "$MAKE" ]]; then
   exit
fi

CLAN="clean"
if [[ "$1" == "$CLEAN" ]]; then
   exit
fi

###########################################################
# Preload flag
PRELOAD="preload"
if [[ "$2" == "$PRELOAD" ]]; then
   P_PRELOAD=" -D PRELOAD"
fi

SINGLE="single"
if [[ "$1" == "$SINGLE" ]]; then
   if [[ "$3" == "$PRELOAD" ]]; then
      P_PRELOAD=" -D PRELOAD"
   fi
fi

SET="set"
if [[ "$1" == "$SET" ]]; then
   if [[ "$3" == "$PRELOAD" ]]; then
      P_PRELOAD=" -D PRELOAD"
   fi
fi

###########################################################
# Run all tests add check for pass fail
ALL="all"
if [[ "$1" == "$ALL" ]]; then
   echo ""
   echo ">>>>> Simulation begins <<<<<"
   for filename in verif/src/*/*.c; do
      printf "%s\t> " $filename | expand -t 40 
      ext=".hex"
      cp -f ${filename/\.c/$ext} load_mem.hex
      ext=".checks"
      cp -f ${filename/\.c/$ext} checks.hex
      iverilog -o ice51.dat -D SIM $P_PRELOAD -c etc/filelist.txt
      OP=$(time (vvp ice51.dat -vcd)  2>&1)
      RES=$(echo "$OP" | grep "PASSED\|ERROR")
      TIME=$(echo "$OP" | grep "real ")
      echo "$RES ($TIME)"
   done
   echo ">>>>> Simulation ends <<<<<"
   exit
fi

###########################################################
# Run a set of tests pass fail
SET="set"
if [[ "$1" == "$SET" ]]; then
   echo ""
   echo ">>>>> Simulation begins <<<<<"
   for filename in verif/src/$2/*.c; do
      printf "%s\t> " $filename | expand -t 40 
      ext=".hex"
      cp -f ${filename/\.c/$ext} load_mem.hex
      ext=".checks"
      cp -f ${filename/\.c/$ext} checks.hex
      iverilog -o ice51.dat -D SIM $P_PRELOAD -c etc/filelist.txt 
      OP=$(time (vvp ice51.dat -vcd)  2>&1)
      RES=$(echo "$OP" | grep "PASSED\|ERROR")
      TIME=$(echo "$OP" | grep "real ")
      echo "$RES ($TIME)"
   done
   echo ">>>>> Simulation ends <<<<<"
   exit
fi

###########################################################
# Run a single test
SINGLE="single"
if [[ "$1" == "$SINGLE" ]]; then 
   ext=".hex"
   CMD="cp -f ${2/\.c/$ext} load_mem.hex"
   echo $CMD
   $CMD
   
   ext=".checks"
   CMD="cp -f ${2/\.c/$ext} checks.hex"
   echo $CMD
   $CMD
   
   CMD="iverilog -o ice51.dat -D SIM $P_PRELOAD -c etc/filelist.txt"
   echo $CMD
   $CMD
   
   CMD="vvp ice51.dat -vcd > /dev/null 2>&1"
   echo $CMD
   $CMD 
   
   # Load waves for a single test
   WAVES="w"
   if [ "$3" == "$WAVES" ] || [ "$4" == "$WAVES" ]; then
      CMD="gtkwave -S etc/signals.tcl ice51.vcd"
      echo $CMD
      $CMD
   fi
fi
